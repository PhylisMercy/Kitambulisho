curl localhost:5001/api/v1/places/<kitambulisho_station_id>/reviews  - Query for all station reviews

# step 1: add lost ID/kitambulisho to Lost Documents Register
    #minimal require :
            curl -X POST http://0.0.0.0:5001/api/v1/amenities/ -H "Content-Type: application/json" -d '{"name": "Libianca", "ID_Number": "9842552"}'
    # Detailed Required data:
            curl -X POST http://0.0.0.0:5001/api/v1/amenities/ -H "Content-Type: application/json" -d '{"name": "Victor","surname":"Wanyama", "ID_Number": "19912506","ID_found_at_latitude":44.5,"ID_found_at_longitude": 77.8}'
            # todo: textract should capture the Document's serial Number and make it unique to prevent duplicate entries with same ID card reported by 2 recoverers.

            # List all available vitambulisho in the global Lost Documents Register _ for Dev/Debug purposes only
                curl -X GET http://0.0.0.0:5001/api/v1/amenities
            # For production only have support to query a particular kitambulisho/ID
                curl -X GET http://0.0.0.0:5001/api/v1/amenities/<amenity_id>

            # Update Kitambulisho Record
                curl -X PUT http://0.0.0.0:5001/api/v1/amenities/<amenity_id> -H "Content-Type: application/json" -d '{"name": "Libiancas","surname": "Blanco","ID_Number": "9865552"}'
            # Delete Kitambulisho Record
                curl -X DELETE http://0.0.0.0:5001/api/v1/amenities/<amenity_id>

# step 2:  attach a lost but recovered kitambulisho/amenity to a station based on amenity_id
# todo: Ensure that there is only one entry of each unique ID of kitambulisho in the Kitambulisho register.
# But this does not enable for ease of transfer between pick up stations.
# to fix this # remove the unique constraint on the kitambulisho table under models.
# create a table transfers that matches the [id,from_station,to_station,kitambulisho_id] and the collection_register
# should have a foreign key that points to the above transfers table.
    # --> Substep -- Locate mandated Huduma_centers/Kitambulisho_collection_stations near me
    # a. Get all States/Counties
        curl -X GET http://localhost:5001/api/v1/states
        # b. Get all Cities in a State/County
            curl -X GET http://localhost:50001/api/v1/states/<state_id>/cities
            # c. Get all Places/huduma_stations in the current City
                curl -X GET http://localhost:5001/api/v1/cities/<city_id>/places
                # d. Remit the Kitambulisho Document at the Kitambulisho_collection_station/place
                    curl -X POST http://0.0.0.0:5001/api/v1/places/<place_id>/amenities/<amenity_id>
                    # e. Verify that the Document was Successfully Handed in at the Huduma_station/place
                        curl -X GET http://0.0.0.0:5001/api/v1/places/<place_id>/amenities  # use in devmod as it lists all amenities in current station.
                        curl -X GET http://0.0.0.0:5001/api/v1/places/<place_id>/amenities/<amenity_id>  # use in production
                        # f. Handles Duplicates in that You cannot remit ID card twice to Same Station
                            # 2. Cannot remit ID card to multiple stations/ within the same state and across states/counties



    > Query for all available stations to capture place id
    >   curl -X GET http://0.0.0.0:5001/api/v1/places

    curl -X POST http://0.0.0.0:5001/api/v1/places/<place_id>/amenities/<amenity_id>

            # returns on success:
            {
              "__class__": "Kitambulisho_Collection_Register",
              "collection_station_id": "e38b7289-4805-47f6-9d57-9f39ba657292",
              "created_at": "2023-06-12T23:51:24.350452",
              "id": "84c4823d-809b-445a-9091-67b48016030b",
              "kitambulisho_id": "04b96d07-45f2-498e-ad28-4d96c953a999",
              "updated_at": "2023-06-12T23:51:24.350890"
            }
            #return when record exists
            {
                "error": "Record Exists"
            }
            # else
            {
                "error": "Not found"
            }

            # assigning the same kitambulisho_id @ different station returns status code 400 = Record Exists.




#step 3.1: Claimant  Looks up a station where kitambulisho is stored based on kitambulisho pk id
    # a. Check the Global Lost Documents Register for Your ID/Kitambulisho
        curl -X GET http://localhost:5001/api/v1/amenities
        # todo: modify endpoint to only display amenities/vitambulisho that are yet to be cleared
        # todo: Add endpoints  -> curl -X GET http://localhost:5001/api/v1/amenities/cleared  -> shows stats on reissued ID's

        # b. Retrieve kitambulisho row_id and reverse lookup to retrieve the huduma station where it was handed in at.
            curl -X GET localhost:5001/api/v1/amenities/<amenity_id>/places
            # todo: With the above, filter to only show the vitambulisho that are yet to be collected/signed off
            # todo: Add feature that enables reverse lookup [ place->city->state]
            # on Result return:
            curl localhost:5001/api/v1/amenities/85fa7283-7623-4ba9-9bb5-8b374700c3b3/places
            [
              {
                "__class__": "Kitambulisho_Collection_Station",
                "city_id": "b46115e9-d16c-41a4-b5e3-4e59c55cf8ee",
                "created_at": "2023-06-03T16:06:29",
                "description": null,
                "id": "e38b7289-4805-47f6-9d57-9f39ba657292",
                "latitude": null,
                "longitude": null,
                "name": "Kenyaree Kitambulisho Collection Station",
                "next_license_renew_date": null,
                "operate_registration_date": null,
                "staff_user_id": "86e7edd9-9bc9-447b-a4f6-af17ded93978",
                "updated_at": "2023-06-03T16:06:29"
              }
            ]
            # The Claimants Kitambulisho Was turned in @ Kenyaree Kitambulisho Collection Station. The
            # Claimant Can Request for A transfer to their Closest Station e.g Kapsoya By Filling in a Form
            # that will be used To approve the Transfer.

            #.b) Request Transfer to Closest Station from Kenyaree to Kapsoya Station For Ease of Collection Less the need to Travel
                curl -X POST http://0.0.0.0:5001/api/v1/claims_register/<claims_register_id> -H "Content-Type: application/json" -d '{"collection_station_id": "<transfer_station>"}'
                # Current Station ID:e38b7289-4805-47f6-9d57-9f39ba657292
                # kapsoya Station ID: 2ec62c4b-f8ea-4a52-b68d-9b06eb7fb927
                # Claims_register_id : 7911a666-eef9-445e-ae27-aca60340c9f7
                # Grab all Claims Register Entries
                curl -X GET http://localhost:5001/api/v1/claims_register
                # Grab Specific Claims Register Entry
                curl -X GET http://localhost:5001/api/v1/claims_register/<claims_register_id>
                curl -X GET http://localhost:5001/api/v1/claims_register/7911a666-eef9-445e-ae27-aca60340c9f7
                # Return Results
                {
                  "__class__": "Kitambulisho_Collection_Register",
                  "collection_station_id": "e38b7289-4805-47f6-9d57-9f39ba657292",
                  "created_at": "2023-06-13T12:39:15",
                  "id": "7911a666-eef9-445e-ae27-aca60340c9f7",
                  "kitambulisho_id": "85fa7283-7623-4ba9-9bb5-8b374700c3b3",
                  "updated_at": "2023-06-13T12:39:15"
                }
                # Claimants Kitambulisho Record ID [Bantam]: 85fa7283-7623-4ba9-9bb5-8b374700c3b3
                # Perform the Transfer to Kapsoya Kitambulisho Collection Station
                curl -X PUT http://0.0.0.0:5001/api/v1/claims_register/<claims_register_id> -H "Content-Type: application/json" -d '{"collection_station_id": "<transfer_station>"}'
                curl -X PUT http://0.0.0.0:5001/api/v1/claims_register/7911a666-eef9-445e-ae27-aca60340c9f7 -H "Content-Type: application/json" -d '{"collection_station_id": "2ec62c4b-f8ea-4a52-b68d-9b06eb7fb927"}'

                # Verify that Kitambulisho was indeed Transferred from Kenyaree to Kapsoya Kitambulisho Station
                curl localhost:5001/api/v1/amenities/85fa7283-7623-4ba9-9bb5-8b374700c3b3/places
                curl -X GET http://localhost:5001/api/v1/claims_register/7911a666-eef9-445e-ae27-aca60340c9f7

        # verify if a particular ID/kitambulisho has been collected and at which station was this done.
        # response [] - ID unclaimed
        # response [data] - ID had open tickets of claimant
# todo: Add a Request form/endpoint that enables for the ID to be transfered to other kitambulisho collection Station in event that it far from current residence
# todo: The place staff should be logged in in order to perform the transfer.


# step 3.3 Claimant Presents themselves at Station and Staff Searches for Available Amenities/Vitambulisho being held at current station
    curl localhost:5001/api/v1/places/<place_id>/amenities
    # List all ID's/vitambulisho Turned in at kenyaree Kitambulisho Station.
    curl localhost:5001/api/v1/places/e38b7289-4805-47f6-9d57-9f39ba657292/amenities
    # After Identifying Claimants kitambulisho reference number the staff can use it to generate a signoff form.
    curl localhost:5001/api/v1/places/e38b7289-4805-47f6-9d57-9f39ba657292/amenities/85fa7283-7623-4ba9-9bb5-8b374700c3b3
        {
          "Birth_District": null,
          "Birth_Division": null,
          "Birth_Location": null,
          "Birth_Sub_Location": null,
          "ID_Number": "4458989",
          "ID_found_at_latitude": null,
          "ID_found_at_longitude": null,
          "Image_url": null,
          "Signature_url": null,
          "__class__": "Kitambulisho",
          "cleared_on": null,
          "created_at": "2023-06-12T22:52:11",
          "id": "85fa7283-7623-4ba9-9bb5-8b374700c3b3",
          "name": "Bantam",
          "surname": null,
          "updated_at": "2023-06-12T22:52:11"
        }
        # staff retrieves the registration Entry Number of the ID.
        # Global Search the Register in All Stations for Registers .
        curl -X GET localhost:5001/api/claims_register
         # Grab specific claims register Entry.
        curl -X GET localhost:5001/api/claims_register/<claims_register_id>


        # List all the Claims Register of all Reported + handed in Vitambulisho at current Station
        curl -X GET localhost:5001/api/v1/place/<place_id>/claims_register
        curl -X GET localhost:5001/api/v1/place/<place_id>/claims_register/<amenity_id>

# step 3.3 Check all signoffs at a Huduma Center - for Debugging/Dev-only
curl -X GET localhost:5001/api/v1/places/2ec62c4b-f8ea-4a52-b68d-9b06eb7fb927/signoffs  - list all Reissued ids by station


# step 4 -Huduma Station Staff Signs off a Kitambulisho to officially state that the claimant has been reissued with their Document.
curl -X POST http://0.0.0.0:5001/api/v1/signoffs -H "Content-Type: application/json" -d '{"ID_Collector_Register_id": "Vict"}'
{
  "error": "Not found"
}
curl -X POST http://0.0.0.0:5001/api/v1/signoffs -H "Content-Type: application/json" -d '{"ID_Collector_Register_id": "1c6e9030-8e32-4334-8324-0dc5b516323a"}'
{
  "ID_Collector_Register_id": "1c6e9030-8e32-4334-8324-0dc5b516323a",
  "Pay_amount": "null",
  "Tax_Charge": "null",
  "Tax_Filed": "2",
  "__class__": "Kitambulisho_Collection_Station_SignOff",
  "created_at": "2023-06-13T17:30:44.423955",
  "id": "ca1fe07b-6b08-403e-bada-7624f1b90bdb",
  "payment_Transaction_code": null,
  "status": "3",
  "updated_at": "2023-06-13T17:30:44.424337"
}

#  update of Status allowed Values
closed = 0
verification = 1
anomaly = 2
pending = 3

curl -X PUT http://0.0.0.0:5001/api/v1/signoffs/ca1fe07b-6b08-403e-bada-7624f1b90bdb -H "Content-Type: application/json" -d '{"status": "closed"}'
curl localhost:5001/api/v1/signoffs
# DELETE SIGNOFF ENTRY
curl -X DELETE localhost:5001/api/v1/signoffs/<signoff_id>






curl -X POST http://0.0.0.0:5001/api/v1/places/<place_id>/amenities/<amenity_id>/signoff
curl localhost:5001/api/v1/amenities/<amenity_id>/signoffs
# todo: With the above filter to only show the vitambulisho that are yet to be collected

# todo: signoff an id card.
# step 5: Figure out how to implement a todo: Kitambulisho Transfer between Huduma Stations while keeping a record of
# from station and to_station.






# Query for Amenities that have been recovered but have not been turned in at a Station

# Results of above should allow perform reverse lookup at the individual who found it then retrieve their contact
# info and an sms will be sent to them that contains a reference number that was generated and will be used when
# returning the document to a registered collection station/huduma center.

# Creates a table that will map amenities/vitambulisho to the users who recovered the lost document
# This can be used to provide rewards as well as allow for push notifications reminding them to hand in the document to huduma centers.





TODO: reverse check signoff to a station.

TODO: reverse check kitambulisho to a station/stations based on signed off/ pending sign off

# todo: Future: Add support for pagination [ handling of millions of records that involves retrieving data as pages with "base & bounds registers" (: L^]]




